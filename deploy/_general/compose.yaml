services:
  nginx:
    image: nginx:latest
    #restart: unless-stopped
    deploy:
      restart_policy: # https://docs.docker.com/reference/compose-file/deploy/#restart_policy
        condition: none
    volumes:
      # tmp DATA_ROOT from .env usage until image isn't built
      - ${DATA_ROOT:-.}/deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # templates to render environment variables
      #   https://github.com/docker-library/docs/tree/master/nginx#using-environment-variables-in-nginx-configuration-new-in-119
      - ${DATA_ROOT:-.}/deploy/nginx/templates:/etc/nginx/templates:ro
      - ${DATA_ROOT:-.}/pages:/usr/share/nginx/html:ro
      - ${DATA_ROOT:-.}/certbot/www:/var/www/certbot:ro
      - ${DATA_ROOT:-.}/certbot/conf:/etc/letsencrypt:ro
    environment:
      - SERVER_NAME=${SERVER_NAME:-localhost}
    ports:
      # using 'host' mode to simplify diagnostics (correct remote IP)
      #   https://stackoverflow.com/questions/49415595/docker-swarm-get-real-ip-client-host-in-nginx
      # TODO: separate balancer for X-Real-IP (maybe learn HAProxy usage)
      - mode: host
        protocol: tcp
        published: 80
        target: 80
      - mode: host
        protocol: tcp
        published: 443
        target: 443

  # TODO: user/pass setup for remote deployment
  # TODO: --allowed-peer-ip for TURN in internal network only
  # Workaround to deploy multiple WebRTC servers in docker swarm infrastructure. 
  # Host mode cannot be used for several servers on minimum number of swarm nodes.
  #
  # TURN server for server deployments allowed only in internal network.
  # STUN server for clients allowing communications in restricted cone / symmetric NATs.
  #   https://en.wikipedia.org/wiki/Network_address_translation#Methods_of_translation
  # TODO: research can STUN be disabled (because client works without it when server in host mode), 
  #       possibly forwarding (ufw rules) should be set instead allowing server<->client communication via TURN relay on server side  
  #
  # NOTE: service will not be required in K8s orchestration 
  #   (different load-balancer service types are available for the same server)
  coturn:
    image: coturn/coturn:latest
    # -n is not used "Do not use configuration file, take all parameters from the command line only." 
    #   as gives "CONFIGURATION ALERT: Unknown argument: "
    # TODO: use config file instead
    # --listening-port=3478 mentions default value just to recall its value 
    # --relay-threads=1 to make less socket bindings in develop environments
    # --no-cli to get rid of "CONFIG ERROR: Empty cli-password, and so telnet cli interface is disabled! Please set a non empty cli-password!"
    # --no-tcp --no-tls --no-tcp-relay allowing TURN/STUN communication only via UDP
    # --no-multicast-peers "Disallow peers on well-known broadcast addresses (224.0.0.0 and above, and FFXX:*)."
    #
    # --lt-cred-mech "Use long-term credentials mechanism (this one you need for WebRTC usage)."
    # --user is required for long-term authentication mechanism (--lt-cred-mech)
    # --realm is required for current .NET SIPSorcery impl (otherwise it doesn't make correct auth request), 
    #     it's also mentioned in manual "With -a option (--lt-cred-mech), do not forget to set the default realm (-r option)."
    # --fingerprint "TURN server will always add fingerprints to the messages in this session, regardless of the per-server setting."
    # TODO: research is --fingerprint required increasing traffic
    #
    # TODO: enable/setup DTLS support (rm --no-dtls) for clients allowing "stuns:*" url
    command: >
      --listening-port=3478
      --relay-threads=1
      --no-cli
      --no-tcp
      --no-tls
      --no-dtls
      --no-tcp-relay
      --no-multicast-peers
      --lt-cred-mech
      --user user:pass
      --realm default
      --fingerprint
      --log-file=stdout
      --verbose

  #TODO: try docker swarm secrets https://github.com/eerotal/certbot-docker-swarm
  cert:
    image: certbot/certbot:latest
    environment:
      - SERVER_NAME=${SERVER_NAME:-localhost}
    volumes:
      - ${DATA_ROOT:-.}/certbot/www:/var/www/certbot:rw
      - ${DATA_ROOT:-.}/certbot/conf:/etc/letsencrypt:rw
