
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace Common.Data {

/// <remarks>
/// MemoryPack GenerateType: Object<br/>
/// <code>
/// <b>string</b> Id<br/>
/// <b>int</b> Ms<br/>
/// <b>Common.Data.ClientState</b> ClientState<br/>
/// </code>
/// </remarks>
partial struct PeerState : IMemoryPackable<PeerState>
{
    static readonly global::Shared.Tp.Data.Mem.Formatters.QuickInternStringFormatter __IdFormatter = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<global::Shared.Tp.Data.Mem.Formatters.QuickInternStringFormatterAttribute>(typeof(global::Common.Data.PeerState).GetField("Id", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)).GetFormatter();

    static partial void StaticConstructor();

    static PeerState()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<PeerState>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new PeerStateFormatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<PeerState[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<PeerState>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref PeerState value) where TBufferWriter : class, System.Buffers.IBufferWriter<byte>
    {



        writer.WriteObjectHeader(3);
        writer.WriteValueWithFormatter(__IdFormatter, value.@Id);
        writer.WriteUnmanaged(value.@Ms, value.@ClientState);

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    public static void Deserialize(ref MemoryPackReader reader, ref PeerState value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }



        string __Id;
        int __Ms;
        global::Common.Data.ClientState __ClientState;

        
        if (count == 3)
        {
            
            {
                __Id = reader.ReadValueWithFormatter<global::Shared.Tp.Data.Mem.Formatters.QuickInternStringFormatter, string>(__IdFormatter);
                reader.ReadUnmanaged(out __Ms, out __ClientState);


                goto NEW;
            }
#if false
            {
                __Id = value.@Id;
                __Ms = value.@Ms;
                __ClientState = value.@ClientState;

                reader.ReadValueWithFormatter(__IdFormatter, ref __Id);
                reader.ReadUnmanaged(out __Ms);
                reader.ReadUnmanaged(out __ClientState);

                goto SET;
            }
#endif
        }
        else if (count > 3)
        {
            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(PeerState), 3, count);
            goto READ_END;
        }
        else
        {
            
            {
               __Id = default!;
               __Ms = default!;
               __ClientState = default!;
            }
#if false
            {
               __Id = value.@Id;
               __Ms = value.@Ms;
               __ClientState = value.@ClientState;
            }
#endif

            if (count == 0) goto SKIP_READ;
            reader.ReadValueWithFormatter(__IdFormatter, ref __Id); if (count == 1) goto SKIP_READ;
            reader.ReadUnmanaged(out __Ms); if (count == 2) goto SKIP_READ;
            reader.ReadUnmanaged(out __ClientState); if (count == 3) goto SKIP_READ;

    SKIP_READ:
            
            {
                goto NEW;
            }
#if false
            {
                goto SET;
            }
#endif
        }

    SET:
        
        value.@Id = __Id;
        value.@Ms = __Ms;
        value.@ClientState = __ClientState;
        goto READ_END;

    NEW:
        value = new PeerState()
        {
            @Id = __Id,
            @Ms = __Ms,
            @ClientState = __ClientState
        };

    READ_END:

    END:

        return;
    }
}
partial struct PeerState
{
    [global::MemoryPack.Internal.Preserve]
    sealed class PeerStateFormatter : MemoryPackFormatter<PeerState>
    {
        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer,  ref PeerState value)
        {
            PeerState.Serialize(ref writer, ref value);
        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref PeerState value)
        {
            PeerState.Deserialize(ref reader, ref value);
        }
    }
}
}
