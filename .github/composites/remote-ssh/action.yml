name: Remote SSH Commands
description: Helper to run remote ssh commands
inputs:
  ssh_user:
    required: true
    description: ssh user
  ssh_host:
    required: true
    description: ssh host
  ssh_private_key:
    required: true
    description: ssh private key
  step_run:
    required: true
    description: commands script 
  step_name:
    required: false
    description: step name
    default: Run SSH Commands

runs:
  using: "composite"
  steps:
    - name: Setup SSH Private Key
      uses: webfactory/ssh-agent@v0.9.0 # https://github.com/webfactory/ssh-agent
      with:
        ssh-private-key: ${{ inputs.ssh_private_key }}
        log-public-key: false # To simplify debugging and since it contains public key information only, this is turned on by default

    - name: Setup SSH Client
      shell: bash
      run: |
        #### Setup SSH Client
        # setup known_hosts: allow implicit ssh commands that cannot disable host key checking (for example docker with ssh:// host)
        ssh-keyscan -t rsa,ecdsa,ed25519 -H ${{ inputs.ssh_host }} 2> /dev/null >> ~/.ssh/known_hosts

        # setup ssh_config: speedup connections and workaround firewall limits issue 
        echo "Host ${{ inputs.ssh_host }}" >> ~/.ssh/config
        echo "  ControlMaster auto" >> ~/.ssh/config
        echo "  ControlPath ~/.ssh/control-%C" >> ~/.ssh/config
        echo "  ControlPersist 5s" >> ~/.ssh/config

        # export useful variables (for run and clean steps)
        SSH_TARGET="${{ inputs.ssh_user }}@${{ inputs.ssh_host }}"
        echo "SSH_TARGET=$SSH_TARGET" >> $GITHUB_ENV
  
#        # check result ssh_config
#        cat ~/.ssh/config || true
#        # check key is added
#        ssh-add -L
#        # check host available
#        nc -vz ${{ inputs.ssh_host }} 22
#        # check ssh available (w/o host check)
#        ssh -o StrictHostKeyChecking=no $SSH_TARGET whoami

    - name: ${{ inputs.step_name }}
      shell: bash
      run: |
        #### ${{ inputs.step_name }}
        ${{ inputs.step_run }}

    #TODO: use Post Run for cleanup (instead of always function)
    - name: Cleanup SSH Client
      if: always()
      shell: bash
      run: |
        #### Cleanup SSH Client: $SSH_TARGET
        # force close ssh master connection
        ssh -O exit $SSH_TARGET || true

        # cleanup generated configs
        rm -f ~/.ssh/known_hosts ~/.ssh/config

        # cleanup exported variables
        sed -i '/^SSH_TARGET=/d' $GITHUB_ENV
