name: Portainer Deploy

on:
  workflow_dispatch: # allows the workflow to be triggered manually

env:
  DOCKER_STACK_NAME: portainer

jobs:
  deploy:
    name: Update Deployment
    runs-on: ubuntu-latest
    if: ${{ github.run_attempt == 1 }}

    # required to create deployment
    #   https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/controlling-permissions-for-github_token
    permissions:
      deployments: write  # to create/update deployment

    steps:
      - uses: actions/checkout@v4

      # https://docs.github.com/en/rest/deployments/deployments
      - name: Register Deployment
        run: |
          DEPLOYMENT_REGISTER=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{
              "ref": "'${{ github.sha }}'",
              "environment": "infra-portainer",
              "payload": "{ \"state\": \"deploy-state\" }",
              "task": "deploy-task",
              "production_environment": true
            }' \
            https://api.github.com/repos/${{ github.repository }}/deployments)
          echo "deployment: $DEPLOYMENT_REGISTER"
          DEPLOYMENT_ID=$(echo $DEPLOYMENT_REGISTER | jq -r .id)
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      # DOESN'T work because cannot get artifact between workflow runs
      # - run: echo "$DEPLOYMENT_ID" > portainer_deployment_id.txt
      # - name: Upload Deployment ID
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: portainer_deployment_id
      #     path: portainer_deployment_id.txt

      # DOESN'T work because need PAT (or App) token to work with variables
      # - name: Save DEPLOYMENT_ID in Env
      #   run: |
      #     gh variable set DEPLOYMENT_ID --env infra-portainer --body "$DEPLOYMENT_ID"
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: ./.github/composites/remote-deploy
        with:
          ssh_user: ${{ secrets.REMOTE_USER }}
          ssh_host: ${{ secrets.REMOTE_HOST }}
          ssh_private_key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          step_run: |
            #### docker stack deploy
            set -x
            docker stack deploy \
              --with-registry-auth \
              --resolve-image always \
              -c deploy/portainer/portainer-agent-stack.yml \
              ${DOCKER_STACK_NAME}

            # store deployment id allowing to make status inactive on stop
            ssh $SSH_TARGET sh -c "echo $DEPLOYMENT_ID > portainer_deployment_id.txt"

      # https://docs.github.com/en/rest/deployments/statuses
      - name: Update Deployment Status
        env:
          ACTION_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          echo "#### update deployment status: $DEPLOYMENT_ID"
          set -x # debug
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{
              "state": "success",
              "log_url": "${{ env.ACTION_URL }}"
            }' \
            https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses

  stop:
    name: Stop Deployment
    runs-on: ubuntu-latest
    if: ${{ github.run_attempt > 1 }}

    steps:
      # - name: Download Deployment ID
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: portainer_deployment_id
      #     run-id: ${{ github.event.workflow_run.id }}
      # - run: |
      #     DEPLOYMENT_ID=$(cat portainer_deployment_id.txt)
      #     echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - uses: ./.github/composites/remote-deploy
        with:
          ssh_user: ${{ secrets.REMOTE_USER }}
          ssh_host: ${{ secrets.REMOTE_HOST }}
          ssh_private_key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          step_run: |
            #### stop deployment
            set -x # debug

            # obtain deployment id to make status inactive
            DEPLOYMENT_ID=$(ssh $SSH_TARGET "cat portainer_deployment_id.txt")
            echo "DEPLOYMENT_ID=$DEPLOYMENT_ID"

            #TODO: docker stack rm

            # inactivate status
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"state": "inactive"}' \
              https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses
